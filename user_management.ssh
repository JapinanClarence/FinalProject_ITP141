#!/bin/bash

LOGFILE="/var/log/user_management.log"

# Function to log actions
log_action() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOGFILE"
}

# Function to check password strength
check_password_strength() {
    local PASSWORD=$1
    if [[ ${#PASSWORD} -lt 8 || ! $PASSWORD =~ [A-Z] || ! $PASSWORD =~ [a-z] || ! $PASSWORD =~ [0-9] || ! $PASSWORD =~ [^a-zA-Z0-9] ]]; then
        echo "Weak password. Must be at least 8 characters long and include upper case, lower case, digit, and special character."
        return 1
    fi
    return 0
}

# Function to add a user
add_user() {
    read -p "Enter username: " USERNAME

    # Check if the user already exists
    if id "$USERNAME" &>/dev/null; then
        echo "Error: User '$USERNAME' already exists."
        return
    fi

    # Prompt for and validate password strength
    while true; do
        read -s -p "Enter password for $USERNAME: " PASSWORD
        echo
        check_password_strength "$PASSWORD"
        if [[ $? -eq 0 ]]; then break; else echo "Please try again with a stronger password."; fi
    done

    # Optional full name
    read -p "Name (Enter to skip): " FULLNAME

    # Create user with adduser or fallback to useradd
    if command -v adduser &>/dev/null; then
        echo -e "$PASSWORD\n$PASSWORD" | sudo adduser "$USERNAME" --gecos "$FULLNAME" --disabled-password > /dev/null 2>&1
    else
        sudo useradd -m -c "$FULLNAME" -s /bin/bash "$USERNAME" > /dev/null 2>&1
        echo "$USERNAME:$PASSWORD" | sudo chpasswd > /dev/null 2>&1
    fi

    # Check for success
    if id "$USERNAME" &>/dev/null; then
        # Create mail spool for the new user
        sudo touch /var/mail/"$USERNAME"
        sudo chown "$USERNAME":"$USERNAME" /var/mail/"$USERNAME"
        sudo chmod 660 /var/mail/"$USERNAME"

        log_action "Added user: $USERNAME"
        echo "User $USERNAME added successfully."
    else
        echo "Error: Failed to create user '$USERNAME'."
    fi
}
# Function to delete a user
delete_user() {
    read -p "Enter username to delete: " USERNAME
    if id "$USERNAME" &>/dev/null; then
        sudo userdel -r "$USERNAME"
        log_action "Deleted user: $USERNAME"
        echo "User $USERNAME deleted successfully."
    else
        echo "Error: User '$USERNAME' does not exist."
    fi
}

# Function to modify a user
modify_user() {
    read -p "Enter current username to modify: " USERNAME

    if ! id "$USERNAME" &>/dev/null; then
        echo "Error: User '$USERNAME' does not exist."
        return
    fi

    echo "What would you like to modify?"
    echo "1. Change groups"
    echo "2. Change username"

    read -p "Choose an option (1 or 2): " MODIFY_OPTION

    case $MODIFY_OPTION in
        1)
            read -p "Enter new groups: " GRPS
            sudo usermod -G "$GRPS" "$USERNAME"
            log_action "Modified groups for $USERNAME to $GRPS"
            echo "User $USERNAME groups modified successfully."
            ;;
        2)
            read -p "Enter the new username: " NEW_USERNAME

            if id -u "$NEW_USERNAME" &>/dev/null; then
                echo "Error: The username '$NEW_USERNAME' already exists."
                return
            fi

            sudo usermod -l "$NEW_USERNAME" "$USERNAME"
            log_action "Renamed user $USERNAME to $NEW_USERNAME"
            echo "User $USERNAME renamed to $NEW_USERNAME successfully."
            ;;
        *)
            echo "Invalid option. Please try again."
            ;;
    esac
}

# Function to assign user to a group
assign_group() {
    read -p "Enter username to assign group: " USERNAME
    if ! id "$USERNAME" &>/dev/null; then
        echo "Error: User '$USERNAME' does not exist."
        return
    fi

    read -p "Enter the group to assign to $USERNAME: " GROUP
    if getent group "$GROUP" > /dev/null 2>&1; then
        sudo usermod -aG "$GROUP" "$USERNAME"
        log_action "Assigned user $USERNAME to group $GROUP"
        echo "User $USERNAME successfully added to group $GROUP."
    else
        echo "Error: Group '$GROUP' does not exist."
    fi
}

# Function to assign directory permissions
assign_permissions() {
    read -p "Enter directory path: " DIR
    read -p "Enter username: " USERNAME
    read -p "Enter permissions: " PERMISSIONS

    # Check if the user exists
    if ! id "$USERNAME" &>/dev/null; then
        echo "Error: User '$USERNAME' does not exist."
        return
    fi

    # Check if the directory exists
    if [ ! -d "$DIR" ]; then
        echo "Error: Directory '$DIR' does not exist."
        return
    fi

    # Set ownership and permissions
    if sudo chown "$USERNAME" "$DIR" && sudo chmod "$PERMISSIONS" "$DIR"; then
        log_action "Set permissions for $DIR to $PERMISSIONS for user $USERNAME."
        echo "Permissions for $DIR set successfully."
    else
        log_action "Failed to set permissions for $DIR with $PERMISSIONS for user $USERNAME."
        echo "Error: Failed to set permissions for $DIR."
    fi
}

# Function to generate user activity report
generate_report() {
    # Output file for the report
    echo "User Activity Report:" > report.txt
    echo "----------------------------------------------------------" >> report.txt
    echo "Username         Shell           Last Login Time" >> report.txt
    echo "----------------------------------------------------------" >> report.txt

    # Get a list of users with their shells and UIDs from /etc/passwd, excluding system users and nologin users
    awk -F: '{if ($3 >= 1000 && $7 != "/usr/sbin/nologin" && $7 != "/bin/false") print $1, $7}' /etc/passwd | while read -r user shell; do
        # Get the last login information using lastlog
        last_login=$(lastlog -u "$user")

        # Check if the lastlog entry shows "Never logged in"
        if echo "$last_login" | grep -q "Never logged in"; then
            last_time="**Never logged in**"
        else
            # Extract the last login time and avoid printing "Latest"
            last_time=$(echo "$last_login" | awk '{if ($4 != "Latest") print $4, $5, $6, $7, $8}')
        fi

        # Format and write the output to the report
        printf "%-15s %-15s %-40s\n" "$user" "$shell" "$last_time" >> report.txt
    done

    # Confirmation message
    echo "Report generated: report.txt"
}
# Function to set password expiration policy
set_password_policy() {
   read -p "Enter username: " USERNAME

   # Check if the user exists.
   if ! id "$USERNAME" &>/dev/null; then
       echo "Error: User '$USERNAME' does not exist."
       return
   fi

   echo "Password Policy Options:"
   echo "1. Set expiration days(ex.30)"
   echo "2. Remove password expiration"

   read -p "Choose an option: " OPTION

   case $OPTION in
       1)
           read -p "Enter days until password expiration: " DAYS
           sudo chage -M "$DAYS" "$USERNAME"
           log_action "Set password expiration for '$USERNAME' to '$DAYS' days."
           echo "Password expiration policy set for '$USERNAME'."
           ;;
       2)
           sudo chage -M -1 "$USERNAME"
           log_action "Removed password expiration for '$USERNAME'."
           echo "'$USERNAME' no longer has a password expiration policy."
           ;;
       *)
           echo "Invalid option. Please try again."
           ;;
   esac
}

# Main menu loop
while true; do
    echo ""
    echo "--- User Management Script ---"
    echo "1. Add User"
    echo "2. Delete User"
    echo "3. Modify User"
    echo "4. Assign Permissions"
    echo "5. Assign Groups"
    echo "6. Generate User Activity Report"
    echo "7. Set Password Expiration Policy"
    echo "8. Exit"

    read -p "Choose an option: " OPTION

    case $OPTION in
        1) add_user ;;
        2) delete_user ;;
        3) modify_user ;;
        4) assign_permissions ;;
        5) assign_group ;;
        6) generate_report ;;
        7) set_password_policy ;;
        8) exit 0 ;;
        *) echo "Invalid option. Please try again." ;;
    esac
done

